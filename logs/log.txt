
                        Fourmilab Double Pendulum

                            Development Log

2022 September 16

Added code to updateBobs() and placeRod() to scale the diameter of the
hub, bobs, and edges by globalScale so they're appropriate to the scale
of the model as a whole.  If you scale down too far, you'll run into
the minimum prim dimension, however, and the mechanism will look "fat"
with respect to its size.

Added the ability for avatars to sit on the lower bob.  A sit anywhere
on the object directs the avatar to a sit target on the lower bob.
The sit is detected both in the main script and in a script in the bob.
When an avatar is sitting, the main script sends a LM_BO_MOVE message
to the bob whenever it moves, and the bob adjusts the position of the
avatar so it moves along with the bob.

Integrated the Script Processor and Menu Processor.  They work exactly
as they do in other Fourmilab applications.

Removed the Edge script from the rod objects.  As they are manipulated
directly from the main script, they no longer need their own scripts.

Reset the initial length setting of both rods to the arbitrary number
50.  Set the lengths as you wish; the display scale of the pendulum
will be adjusted to fill the case.

Add the settings for masses, rod lengths, gravity, and scale to the
Status command output.

Modified updateGlobe so the thickness of the case and plinth are
scaled with globalScale along with their height and width.

Added a Set case on/off command to show or hide the display case.
Note that hiding the display case does not keep it from being selected
if you right click on where it remains as part of the model.

2022 September 17

After a huge amount of confusion and suffering, I have sitting on the
model working basically as I intend it to.  The main pitfall here is
naively assuming that the "link numbers" Firestorm shows you when
you're editing a linkset object have anything at all to do with the
actual link numbers by which links referenced within scripts.  They
don't. Now, usually I can ignore link numbers because I use the
Fourmilab findLinkNumber() function to find links by object name and
store them in variables within the script, but there are some dark
corners in LSL where absolute link numbers matter, for example in sit
targets where, when the user clicks on a link which has no explicit sit
target, it directs the avatar to the link with the smallest link number
that has a vacant seat. In this case, absolute link numbers matter--a
lot--and when Firestorm is lying to you about them, you can waste a
huge amount of time trying to figure out what is going on.

I finally added diagnostic code that printed to association between
actual link numbers and object names and traced link numbers through
the avatar sit process and figured out what was happening.

The second thing is that when working with highly dynamic mechanical
models, the wisest course is to pay no attention at all to the silly
"sit position" associated with a prim.  Now, you need to set this to
something nonzero in order to cause the prim to be a sit target, but
trying to maintain it as the prim twists and turns is a fool's errand.
The best approach is to set it to something innocuous and then, when
you get the changed CHANGED_LINK event when a user sits on the prim,
immediately override the avatar's position and rotation with the same
code you use to move and orient the avatar as the prim moves withing
the linkset.  This will save you a vast amount of confusion and
suffering.

Confirmed that the transformations for sit on the moving bob acccount
for global rotation of the root prim of the linkset.

Confirmed that static sitting on the top of the case by sitting on
the plinth (or when the bob seat is occupied) handles global rotation
of the root prim.

You can even rotate the object while an avatar is sitting on the bob
and as soon as you confirm the rotation, the avatar will resume sitting
on the bob in its new rotation plane.

Made the generation of particle system paths and temporary prim trails
following the lower bob use the colour of that bob, as set by "Set
colour" instead of a hard-coded colour.  Because of the way particle
systems work, the colour is bound at the time the particle emission is
started and will not change if the bob colour changes unless the
particle system is restarted with "Set path on".  When generating
temporary prim trails with "Set path lines", a change to the colour of
the bob immediately changes the colour of the trail.

Added new options to "Set paths lines".  If you specify "permanent"
after "lines", the lines will be traced with permanent prims, not the
usual temporary prims.  These count against land impact, and it makes
a lot of them, to be careful!  These prims are not erased when you Set
paths off.  To delete them, use "Set paths lines clear", which will send
a message telling them to self-destruct.

Inserted and ran code to use llSetLinkCamera to clear out some camera
positions on links that shouldn't have been there and were messing up
camera positioning when sitting on the plinth.  This code has now been
commented out, but I've kept it around in case there should be another
link mix-up that requires running it again.

Enabling "Set plot lines" caused the simulation to slow to a crawl
because llRezObject() delays a script by 100 milliseconds on every
call.  But since is a delay of an individual script, we can create a
farm of plotter scripts and use them as separate processes to speed up
total throughput.  So that's what we do.  I created 12 instance of a
script called "Line plotter n", where n goes from 1 to 12.
displayModel() in the main script now, rather than calling flPlotLine()
directly, sends a LM_PL_DRAW link message containing its arguments, the
flPlotPerm flag to indicate whether the line is temporary or permanent,
and a plotter ID number which increments on each call modulo 12 (or
however many plotters scripts have been placed in the inventory).
Since our fastest tick time is 0.01 seconds, 12 scripts should be
enough so that each, suffering the 0.1 second delay for each vector,
one is always ready and we never fill up the link message queue and
lose path segments.  (If we need more, I'll just add them.)

I was originally thinking of a fancy scheme where server processes sent
messages to indicate they were ready and the simulation waited for one
if none was ready, but this seems to work just fine and avoids all the
complexity.

One salutary side-effect of this is that removing flPlotLine, which is
rather long and involved, to an external script reduced memory usage in
the main script from 80% to 76%.

2022 September 18

Integrated the fuis() and suif() floating point encoders and decoders
from Orbits into the code that sends parameters from the main script to
the line plotters.  This not only preserves full precision (for what
it's worth, in single precision) but is much faster than converting to
and from decimal with llList2CSV() and back.  This should reduce the
overhead for generating line paths in the main script to the mininum.
You can still see the difference compared to when line paths are turned
off, but it's much faster than before.

Replaced all of the calls in the main script that squared numbers using
llPow() with simple multiplication of the two quantities.

Added the "Set scale nX" feature to multiply the current scale factor
by a number, allowing Bigger and Smaller buttons in menus.

Added the ability to specify a run time in seconds on the Run command,
for example "Run 30".  The Run command now suspends script execution
until it completes, either by a manual Run off or reaching the end of
the specified run time.

Added a "Set tock n" command which controls how frequently the model is
updated in terms of ticks running the integrator.  This can make the
motion more jerky, but when running with time-consuming operations such
as Set paths lines it makes the simulation run faster.  Anything much
more than 3 is pretty jerky, however.

2022 September 19

Made an animated GIF for the Marketplace listing, stored in the
repository at marketplace/images/double_pendulum.gif.  I recorded a
video with vokoscreenNG using a window size of 800x600.  I loaded the
resulting dp.mkv file into OpenShot, scaled to eliminate the frame
captured by vokoscreen, and exported as dp.mp4, an 800x600 MP4/H.264
video at 12 frames per second (advanced/custom settings).  This was
then run through ffmpeg with crop settings (-t and -ss options) to
encode an extract at 700x525 pixels which was less than the maximum 1
Mb which can be uploaded to the Marketplace:
    ffmpeg -i dp.mp4 -t 9.5 -ss 30 -filter_complex \
        "[0:v] fps=12,scale=700:-1,split [a][b];[a] palettegen [p];[b][p] paletteuse" double_pendulum.gif

Made images for the Marketplace listing, stored in repository directory
marketplace/images.

Updated Configuration script to just show how to run the Demonstration
script.

Removed text legend for production version.

Modified the Set angle command so angles are reckoned as for compass
bearings, with 0 degrees north (positive Z axis), 90 degrees east
(positive X axis), etc.  Previously, 0 degrees was south and, to make
things even more confusing, the sign of angles was different for bobs 1
and 2.

Experimented with an alternative particle system for Set paths on. This
drops circular particles of the smallest possible size (0.03125)
without trying to connect them into a ribbon, which has a bunch of
problems.  This also has compromises: when the bob is moving quickly,
it makes disconncted dots which may not be obviously connected.  To
make it easier to interpret the trail, I made the path initially drawn
in white, then "decay" to red over the 30 second lifetime of the
particles.  I'm not sure which I prefer: I make make both available as
an option on Set path.

2022 September 20

As an experiment, tried installing the Polychrome script in flPlotLine
segments to make them randomly change colours.  Running all those
scripts and their sending frequent colour changes to the viewer caused
the simulation and/or viewer to grind to a halt, resulting in loss of
link messages to the line plotters and incomplete updates of the model.
I ripped this code right out again.

On further reflection, I decided that the dot dropping particle system
does a worse job than the ribbon.  Neither really looks good or does a
nice job tracing the path, but the ribbon is a little better so I've
re-enabled it.  I left the alternative code in, commented out, in case
I have any more bright ideas to try.

To support menu systems which permit the user to vary settings while a
simulation is running, added a "Run asynchronous" option, which starts
the simulation but does not pause a running script that submits it. A
script (or, more usually, a menu) may start the simulation with this
option and then, while it's running, allow the user to change
simulation parameters from subsequent menu picks.

2022 September 21

Added a "Set case hat" option that configures the object to be worn as
a hat.  It sets scale to 0.3, hides the plinth while leaving the disc
visible, rotates the disc 90 degrees from its original position around
the X axis so it stands vertically when attached to the skull, shifts
the disc upward to clear the head, and appends " Hat" to the name of
the object.

Added code to updateGlobe() to automatically scale the thickness of the
disc based upon the larger of the two masses so that the sphere masses
will fit within the mass and not protrude if set very large.  The
thickness is fixed at a minimum of 0.05 times the global scale factor
if the masses are smaller than the value which would correspond to that
size.  The thickness of the plinth is not adjusted.
